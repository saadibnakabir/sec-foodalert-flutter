// lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'firebase_options.dart'; // Auto-generated by flutterfire

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // OneSignal setup
  OneSignal.Debug.setLogLevel(OSLogLevel.verbose);
  OneSignal.Debug.setAlertLevel(OSLogLevel.none);
  OneSignal.initialize('a6030741-8bb3-4dde-bdbf-fba914c5d9e3'); // Your App ID
  OneSignal.Notifications.requestPermission(true);

  // Handle notification clicks
  OneSignal.Notifications.addClickListener((result) {
    final screen = result.notification.additionalData?['screen'];
    if (screen == 'status') {
      navigatorKey.currentState?.pushNamed('/status');
    } else {
      navigatorKey.currentState?.pushNamed('/');
    }
  });

  runApp(const FoodAlertApp());
}

class FoodAlertApp extends StatelessWidget {
  const FoodAlertApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'ESP32 Food Alert',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
        useMaterial3: true,
      ),
      routes: {
        '/': (context) => const FoodStatusScreen(),
        '/status': (context) => const FoodStatusScreen(),
      },
    );
  }
}

class FoodStatus {
  final String state;
  final int updatedAt;
  final int? expiresAt;

  FoodStatus({
    required this.state,
    required this.updatedAt,
    this.expiresAt,
  });

  factory FoodStatus.fromMap(Map<dynamic, dynamic> map) {
    return FoodStatus(
      state: map['state']?.toString() ?? '',
      updatedAt: map['updatedAt'] ?? 0,
      expiresAt: map['expiresAt'],
    );
  }
}

class FoodStatusScreen extends StatefulWidget {
  const FoodStatusScreen({super.key});

  @override
  State<FoodStatusScreen> createState() => _FoodStatusScreenState();
}

class _FoodStatusScreenState extends State<FoodStatusScreen> {
  late final DatabaseReference _statusRef;
  FoodStatus? _currentStatus;

  @override
  void initState() {
    super.initState();
    _statusRef = FirebaseDatabase.instance.ref('/status/current');
    _statusRef.onValue.listen((event) {
      final data = event.snapshot.value;
      setState(() {
        _currentStatus = (data is Map)
            ? FoodStatus.fromMap(data as Map<dynamic, dynamic>)
            : null;
      });
    });
  }

  bool get isFoodReady =>
      _currentStatus?.state.toLowerCase() == 'ready';

  @override
  Widget build(BuildContext context) {
    final cardColor = isFoodReady
        ? Colors.green.shade300
        : Colors.red.shade300;
    final statusIcon = isFoodReady
        ? Icons.check_circle
        : Icons.cancel;
    final statusText = isFoodReady
        ? 'Food is Being Served'
        : 'No Update';

    return Scaffold(
      appBar: AppBar(
        title: const Text('Food Alert Status'),
        centerTitle: true,
      ),
      body: Center(
        child: Card(
          color: cardColor,
          margin: const EdgeInsets.all(16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(statusIcon, size: 72, color: Colors.white),
                const SizedBox(height: 16),
                Text(
                  statusText,
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 16),
                if (_currentStatus != null) ...[
                  Text(
                    'State: ${_currentStatus!.state}',
                    style: const TextStyle(color: Colors.white70),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Updated At: ${DateTime.fromMillisecondsSinceEpoch(_currentStatus!.updatedAt).toLocal()}',
                    style: const TextStyle(color: Colors.white70),
                  ),
                  if (_currentStatus!.expiresAt != null) ...[
                    const SizedBox(height: 4),
                    Text(
                      'Expires At: ${DateTime.fromMillisecondsSinceEpoch(_currentStatus!.expiresAt!).toLocal()}',
                      style: const TextStyle(color: Colors.white70),
                    ),
                  ],
                ] else
                  const Text(
                    'Waiting for data...',
                    style: TextStyle(color: Colors.white70),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
